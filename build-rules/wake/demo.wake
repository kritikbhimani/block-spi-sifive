def blockPIOSifiveRoot = simplify "{here}/../.."

def loopbackScalaModule =
  def name = "loopback"
  def path = "{blockPIOSifiveRoot}/craft/loopback"
  def scalaVersion = sifiveSkeletonScalaModule.getScalaModuleScalaVersion
  def deps = sifiveBlocksScalaModule, sifiveSkeletonScalaModule, Nil
  makeScalaModule name path scalaVersion
  | setScalaModuleSourceDirs ("src", Nil)
  | setScalaModuleDeps deps
  | setScalaModuleScalacOptions ("-Xsource:2.11", Nil)

def pioScalaModule =
  def name = "pio"
  def rootDir = "{blockPIOSifiveRoot}/craft/pio"
  def scalaVersion = sifiveSkeletonScalaModule.getScalaModuleScalaVersion
  def deps = loopbackScalaModule, sifiveBlocksScalaModule, sifiveSkeletonScalaModule, Nil
  makeScalaModule name rootDir scalaVersion
  | setScalaModuleSourceDirs ("src", Nil)
  | setScalaModuleDeps deps
  | setScalaModuleScalacOptions ("-Xsource:2.11", Nil)

def pioBlock =
  def scalaModule = pioScalaModule
  def config = "sifive.blocks.pio.WithDummyUARTConfig"
  makeScalaBlock scalaModule config

def makeSkeletonUartDUTPlan name blocks =
  def testharness = "sifive.blocks.pio.SkeletonUartTestHarness"
  def config = "sifive.skeleton.DefaultConfig"
  makeRocketChipDUTPlan name sifiveSkeletonScalaModule testharness config

def makeTestSocketUartDUT name blocks =
  def baseDUT =
    makeSkeletonUartDUTPlan name Nil
    | addRocketChipDUTPlanScalaBlock testFinisherBlock
  foldl addRocketChipDUTPlanScalaBlock.flip baseDUT blocks

global def uartDUT = makeTestSocketUartDUT "uart" (pioBlock, Nil)

def uart1 =
  def programName = "uart1"
  def cFiles =
    source "{blockPIOSifiveRoot}/tests/c/demo/mainuart1.c",
    Nil
  makeTestProgramPlan programName cFiles

global def demoUart1Test =
  def name = "uart1"
  def block = pioBlock
  def program = uart1
  def plusargs =
    NamedArg        "verbose",
    NamedArgInteger "random_seed"      1234,
    NamedArgInteger "tilelink_timeout" 16000,
    NamedArgInteger "max-cycles"       20000,
    Nil
  makeBlockTest name block program plusargs

publish dutTests = demoUart1Test, Nil
